---
import ThemeToggle from "./ThemeToggle.astro"

const navItems = [
  {
    title: "About me",
    label: "about-me",
    url: "/#About me",
  },
  {
    title: "Experience",
    label: "experience",
    url: "/#Experience",
  },
  {
    title: "Project",
    label: "project",
    url: "/#Project",
    hasDropdown: true,
    dropdownItems: [
      {
        title: "Job Market Analysis & Forecasting",
        url: "/projects/job-market",
      },
      {
        title: "AI Meeting Creation Automation",
        url: "/projects/meeting-automation",
      },
      {
        title: "MHM - Heat Map",
        url: "/projects/heatmap",
      },
      {
        title: "SAP - SD & Integration",
        url: "/projects/sap",
      },
      {
        title: "Confectionery Sales Analysis",
        url: "/projects/confectionery-sales",
      },
      {
        title: "Thai Son - Education Management",
        url: "/projects/thaison",
      },
      {
        title: "DraEdu - EduTech",
        url: "/projects/edutech",
      },
      {
        title: "All Projects",
        url: "/#Project",
      },
    ]
  },
  {
    title: "Contact",
    label: "contact",
    url: "/#Contact",
  },
]
---

<header
  class="fixed top-0 z-50 w-full mx-auto mt-2"
>
<header
  class="fixed top-0 z-50 w-full mx-auto mt-2"
>
  <div class="flex items-center justify-center relative px-4">
    <!-- Mobile Menu Button (visible on mobile, moved to right) -->
    <button
      id="mobile-menu-button"
      class="fixed top-4 right-4 z-50 md:hidden bg-white dark:bg-gray-800 p-2 rounded-full shadow-lg border border-gray-200 dark:border-gray-700"
      aria-label="Toggle mobile menu"
    >
      <svg id="hamburger-icon" class="w-6 h-6 text-gray-600 dark:text-gray-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
      <svg id="close-icon" class="w-6 h-6 text-gray-600 dark:text-gray-200 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <!-- Logo/Home Button (visible on mobile, aligned with hamburger menu) -->
    <div class="md:hidden fixed top-4 left-4 z-40 flex items-center">
      <a
        href="/#hero"
        class="bg-white dark:bg-gray-800 px-4 py-2 rounded-full shadow-lg border border-gray-200 dark:border-gray-700 text-gray-600 dark:text-gray-200 font-semibold hover:text-blue-500 dark:hover:text-blue-500 transition h-10 flex items-center"
      >
        HuyResearcher
      </a>
    </div>

    <!-- Desktop Navigation -->
    <nav
      id="desktop-nav"
      class="hidden md:flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center relative"
    >
    <!-- HuyResearcher as first nav item (desktop) -->
    <a
      href="/#hero"
      class="relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500 font-semibold"
    >
      HuyResearcher
    </a>
    
    {
      navItems.map((link) => (
        link.hasDropdown ? (
          <div class="relative dropdown-container">
            <button
              class="relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500 dropdown-trigger"
              aria-label={link.label}
              data-dropdown={link.label}
            >
              {link.title}
              <svg class="w-3 h-3 ml-1 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
            <div class="dropdown-menu absolute top-full left-0 mt-1 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 min-w-48 opacity-0 invisible transition-all duration-200 transform translate-y-2">
              {link.dropdownItems?.map((dropdownItem) => (
                <a
                  href={dropdownItem.url}
                  class="block px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-blue-500 dark:hover:text-blue-400 first:rounded-t-lg last:rounded-b-lg transition-colors"
                >
                  {dropdownItem.title}
                </a>
              ))}
            </div>
          </div>
        ) : (
          <a
            class="relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500"
            aria-label={link.label}
            href={link.url}
          >
            {link.title}
          </a>
        )
      ))
    }
    <ThemeToggle />
  </nav>

  <!-- Mobile Navigation Menu -->
  <nav
    id="mobile-nav"
    class="md:hidden fixed inset-0 bg-white dark:bg-gray-900 z-30 transform translate-x-full transition-transform duration-300 ease-in-out"
  >
    <div class="flex flex-col h-full pt-20 px-6">
      <div class="flex-1 overflow-y-auto">
        <!-- Mobile nav items -->
        <div class="space-y-4">
          {
            navItems.map((link) => (
              link.hasDropdown ? (
                <div class="mobile-dropdown-container">
                  <button
                    class="w-full text-left py-3 px-4 text-lg font-medium text-gray-700 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition mobile-dropdown-trigger"
                    data-mobile-dropdown={link.label}
                  >
                    <div class="flex items-center justify-between">
                      <span>{link.title}</span>
                      <svg class="w-5 h-5 transition-transform mobile-dropdown-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                      </svg>
                    </div>
                  </button>
                  <div class="mobile-dropdown-menu ml-4 space-y-2 overflow-hidden max-h-0 transition-all duration-300">
                    {link.dropdownItems?.map((dropdownItem) => (
                      <a
                        href={dropdownItem.url}
                        class="block py-2 px-4 text-gray-600 dark:text-gray-400 hover:text-blue-500 dark:hover:text-blue-400 hover:bg-gray-50 dark:hover:bg-gray-800 rounded transition mobile-nav-link"
                      >
                        {dropdownItem.title}
                      </a>
                    ))}
                  </div>
                </div>
              ) : (
                <a
                  href={link.url}
                  class="block py-3 px-4 text-lg font-medium text-gray-700 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition mobile-nav-link"
                >
                  {link.title}
                </a>
              )
            ))
          }
        </div>
      </div>
      
      <!-- Mobile Theme Toggle -->
      <div class="border-t border-gray-200 dark:border-gray-700 pt-6 pb-6">
        <div class="flex justify-center">
          <ThemeToggle />
        </div>
      </div>
    </div>
  </nav>
  </div>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500")
            } else {
              item.classList.remove("text-blue-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Desktop Dropdown functionality
    const dropdownTriggers = document.querySelectorAll('.dropdown-trigger')
    const dropdownMenus = document.querySelectorAll('.dropdown-menu')
    
    dropdownTriggers.forEach((trigger, index) => {
      const menu = dropdownMenus[index]
      let timeoutId: number
      
      if (trigger && menu) {
        trigger.addEventListener('mouseenter', () => {
          clearTimeout(timeoutId)
          menu.classList.remove('opacity-0', 'invisible', 'translate-y-2')
          menu.classList.add('opacity-100', 'visible', 'translate-y-0')
        })
        
        trigger.addEventListener('mouseleave', () => {
          timeoutId = setTimeout(() => {
            menu.classList.remove('opacity-100', 'visible', 'translate-y-0')
            menu.classList.add('opacity-0', 'invisible', 'translate-y-2')
          }, 150)
        })
        
        menu.addEventListener('mouseenter', () => {
          clearTimeout(timeoutId)
        })
        
        menu.addEventListener('mouseleave', () => {
          menu.classList.remove('opacity-100', 'visible', 'translate-y-0')
          menu.classList.add('opacity-0', 'invisible', 'translate-y-2')
        })
      }
    })

    // Close dropdowns when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as Element
      if (!target.closest('.dropdown-container')) {
        dropdownMenus.forEach(menu => {
          menu.classList.remove('opacity-100', 'visible', 'translate-y-0')
          menu.classList.add('opacity-0', 'invisible', 'translate-y-2')
        })
      }
    })

    // Mobile Menu functionality
    const mobileMenuButton = document.getElementById('mobile-menu-button')
    const mobileNav = document.getElementById('mobile-nav')
    const hamburgerIcon = document.getElementById('hamburger-icon')
    const closeIcon = document.getElementById('close-icon')
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link')

    let isMobileMenuOpen = false

    const toggleMobileMenu = () => {
      isMobileMenuOpen = !isMobileMenuOpen
      
      if (isMobileMenuOpen) {
        mobileNav?.classList.remove('translate-x-full')
        mobileNav?.classList.add('translate-x-0')
        hamburgerIcon?.classList.add('hidden')
        closeIcon?.classList.remove('hidden')
        document.body.style.overflow = 'hidden'
      } else {
        mobileNav?.classList.remove('translate-x-0')
        mobileNav?.classList.add('translate-x-full')
        hamburgerIcon?.classList.remove('hidden')
        closeIcon?.classList.add('hidden')
        document.body.style.overflow = ''
      }
    }

    const closeMobileMenu = () => {
      if (isMobileMenuOpen) {
        toggleMobileMenu()
      }
    }

    mobileMenuButton?.addEventListener('click', toggleMobileMenu)

    // Close mobile menu when clicking on nav links
    mobileNavLinks.forEach(link => {
      link.addEventListener('click', closeMobileMenu)
    })

    // Mobile dropdown functionality
    const mobileDropdownTriggers = document.querySelectorAll('.mobile-dropdown-trigger')
    
    mobileDropdownTriggers.forEach(trigger => {
      trigger.addEventListener('click', () => {
        const dropdownMenu = trigger.nextElementSibling as HTMLElement
        const arrow = trigger.querySelector('.mobile-dropdown-arrow') as HTMLElement
        
        if (dropdownMenu && arrow) {
          const isOpen = dropdownMenu.style.maxHeight && dropdownMenu.style.maxHeight !== '0px'
          
          if (isOpen) {
            dropdownMenu.style.maxHeight = '0px'
            arrow.style.transform = 'rotate(0deg)'
          } else {
            dropdownMenu.style.maxHeight = dropdownMenu.scrollHeight + 'px'
            arrow.style.transform = 'rotate(180deg)'
          }
        }
      })
    })

    // Close mobile menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isMobileMenuOpen) {
        closeMobileMenu()
      }
    })

    // Handle window resize
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 768 && isMobileMenuOpen) {
        closeMobileMenu()
      }
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  /* Desktop Navigation */
  #desktop-nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  #desktop-nav {
    @apply dark:bg-gray-800/90 bg-white/50 backdrop-blur;
  }

  @keyframes nav-shadown {
    0% {
      @apply dark:bg-gray-800/0 bg-white/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur ring-white/10;
    }
  }

  /* Mobile Navigation */
  #mobile-nav {
    backdrop-filter: blur(10px);
  }

  /* Mobile dropdown transitions */
  .mobile-dropdown-menu {
    transition: max-height 0.3s ease-in-out;
  }

  .mobile-dropdown-arrow {
    transition: transform 0.3s ease-in-out;
  }

  /* Prevent body scroll when mobile menu is open */
  body.mobile-menu-open {
    overflow: hidden;
  }

  /* Mobile responsiveness improvements */
  @media (max-width: 768px) {
    /* Ensure proper spacing for mobile elements */
    .mobile-nav-spacing {
      padding-top: 5rem;
    }
    
    /* Improved touch targets */
    .mobile-nav-link,
    .mobile-dropdown-trigger {
      min-height: 44px;
    }

    /* Ensure content doesn't overlap with fixed navigation */
    main {
      margin-top: 5rem;
    }
  }

  /* Accessibility improvements */
  @media (prefers-reduced-motion: reduce) {
    #mobile-nav,
    .mobile-dropdown-menu,
    .mobile-dropdown-arrow {
      transition: none;
    }
  }
</style>
